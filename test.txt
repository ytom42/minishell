
環境変数の値が[オプション] + [引数]になっているとき

```bash
bash-3.2$ export TEST="-n hello"
bash-3.2$ env | grep TEST
TEST=-n hello
bash-3.2$ echo $TEST   // echo -n hello と同じ
hellobash-3.2$  　　　  // ここに改行が出ていないのでオプションが効いている
```

環境変数の値が`|`のとき

```bash
bash-3.2$ export PIPE="|"
bash-3.2$ echo $PIPE
|
bash-3.2$ ps -a $PIPE grep bash
ps: illegal argument: |
usage: ps [-AaCcEefhjlMmrSTvwXx] [-O fmt | -o fmt] [-G gid[,gid...]]
          [-g grp[,grp...]] [-u [uid,uid...]]
          [-p pid[,pid...]] [-t tty[,tty...]] [-U user[,user...]]
       ps [-L]
bash-3.2$ ps -a | grep bash
42774 ttys002    0:00.04 bash
 1352 ttys005    0:00.04 bash
 1396 ttys005    0:00.00 grep bash
bash-3.2$
```

パイプでbuiltinコマンドを実行した時の動作


カレントディレクトリが削除されている時の挙動

```bash
bash-5.1$ mkdir dir
bash-5.1$ cd dir
bash-5.1$ rmdir ../dir
bash-5.1$ pwd
/Users/tkomatsu/Documents/dir1/dir      !!!!!!!!!!!!!
bash-5.1$ cd .
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
bash-5.1$ pwd
/Users/tkomatsu/Documents/dir1/dir/.
bash-5.1$
```

シンボリックリンクの実行権限がなくてもファイルを実行できる例

```bash
# ファイル作成
bash-3.2$ echo "echo hello" > exe && chmod +x exe
bash-3.2$ ln -s exe symexe
# シンボリックリンクの実行権限を削除
bash-3.2$ chmod -h -x symexe
# 権限確認
bash-3.2$ ls -l
total 8
-rwxr-xr-x  1 nafuka  staff  11  3  3 21:14 exe
lrw-r--r--  1 nafuka  staff   3  3  3 21:14 symexe -> exe
# コマンド実行確認
bash-3.2$ ./symexe
hello
```

exitの動作

引数の数が多い時
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 実行されないバグに入る !!!!!!!!!!!!!!!!!!!!!!!!!
```bash
bash-3.2$ exit 42 42
exit
bash: exit: too many arguments
bash-3.2$ echo $?
1
```


bashで文字列を数値に変換する関数、legal_numberの奥深い動作例です。
strtolでoverflow/underflowするパターンと末尾のスペースに注意が必要そうです。

```bash
# exit: LONG_MAX
bash-3.2$ bash
bash-3.2$ exit 9223372036854775807
exit
bash-3.2$ echo $?
255
# exit: LONG_MAX + 1
bash-3.2$ bash
bash-3.2$ exit 9223372036854775808
exit
bash: exit: 9223372036854775808: numeric argument required
bash-3.2$ echo $?
255
# exit: LONG_MIN
bash-3.2$ bash
bash-3.2$ exit -9223372036854775808
exit
bash-3.2$ echo $?
0
# exit: LONG_MIN - 1
bash-3.2$ bash
bash-3.2$ exit -9223372036854775809
exit
bash: exit: -9223372036854775809: numeric argument required
bash-3.2$ echo $?
255
# SHLVL: whitespaceを含む場合　その1
bash-3.2$ export SHLVL=`printf '\t\n\v\f\r 42'`
bash-3.2$ bash
bash-3.2$ echo $SHLVL
43
# SHLVL: whitespaceを含む場合　その2
bash-3.2$ export SHLVL=`printf '\t\n\v\f\r 42\v'`
bash-3.2$ bash
bash-3.2$ echo $SHLVL
1
```

f3のみにabcが記述されます

```bash
> f0 echo > f1 > f2 > f3 abc
```

シグナルの出力が、パイプの前後で異なる例
Ctrl + C（同じ）

```bash
bash-3.2$ echo | sleep 10 # Ctrl+C
^C
bash-3.2$ sleep 10 | echo # Ctrl+C

^C
bash-3.2$
```

Ctrl + \（おそらく最後のコマンドでシグナルを受け取る場合`Quit`表示）

```bash
bash-3.2$ echo | sleep 10 # Ctrl+\
^\Quit: 3
bash-3.2$ sleep 10 | echo # Ctrl+\

^\bash-3.2$
```

export で環境変数の値がエスケープされる例

```bash
bash-3.2$ env -i bash
bash-3.2$ export dquote='"' dollar='$' backslash='\' backquote='`' newline='\n'
bash-3.2$ export | grep -v PWD
declare -x SHLVL="1"
declare -x backquote="\`"
declare -x backslash="\\"
declare -x dollar="\$"
declare -x dquote="\""
declare -x newline="\\n"
```
-------------------------------------------------------------------
1> 2> 3>とかされてる方は

```bash
# include <unistd.h>int main()
{
    write(1, "fd = 1\n", 7);
    write(2, "fd = 2\n", 7);
    write(3, "fd = 3\n", 7);
    write(1, "fd = 1\n", 7);
}
```

この時に

```bash
./a.out 1> fd1 2> fd2 3> fd3
```

とすると全部に入ります
最後のファイルを取るようにしてるとできないかもしれないです


```bash
bash-3.2$ $TEST
bash: TEST=aaaa: command not found
```



[https://discord.com/channels/691903146909237289/813630632386625556/824905557793964032](https://discord.com/channels/691903146909237289/813630632386625556/824905557793964032)

```bash
bash-3.2$ export a=" "
bash-3.2$ echo$a-a
-a
bash-3.2$ echo"$a"-a
bash: echo -a: command not found
bash-3.2$ echo'$a'-a
bash: echo$a-a: command not found
```

```bash
echo a > test1 b
echo c > test2 "d    ef"
cat test1 > test3 test2
```

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!minishell: test2: ambiguous redirect
```bash
cat test1 > test3 > test2
```

```bash
cat test1 > test3 ~/.zshrc > test2 # test3が無で上書きされた後(catの出力が無？)、`cat test1 ~/.zshrc > test2`
cat test1 > test3 nononofile > test2 # test3が無で上書きされた後 `cat test1 nononofile > test2` （`cat: nononofile: No such file or directory`だされつつtest2はtest1の内容で上書き）
```

↓
catの出力は関係なく、必ずtest3は無で上書きされそう

```bash
pwd a > test3 b > test2 # test3が無で上書きされ、test2にpwdの出力
```

```bash
cat test1 < test3 test2 # test1とtest2の内容がcat
cat < test3 test2 # test2の内容がcat, test3が存在してないときはENOENT. test2がcatの第1引数になっただけ？
```



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
cd: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
cd: error retrieving current directory: 
zsh: segmentation fault  ./minishell
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
```bash
mkdir test ; cd test ; rmdir ../test ; cd .
```

heredocでも同様

```bash
cmd << HEREDOC arg1 arg2
> a
> b
> HEREDOC
```

```bash
$export TEST="cho -n "
$ e"$TEST" hello
```

envの使い方

権限がない場合、最後までPATHを見てくれる

```bash
bash-3.2$ ./a.out
hello
bash-3.2$ mkdir test
bash-3.2$ cp a.out test/
bash-3.2$ chmod 000 a.out
bash-3.2$ unset PATH
bash-3.2$ PATH=$PWD
bash-3.2$ a.out
bash: /Users/rakiyama/Desktop/a.out: Permission denied
bash-3.2$ PATH+=:$PWD/test
bash-3.2$ a.out
hello
bash-3.2$
```


echoでprintfを使ってたので、改行なしだとバッファリングされたままリダイレクト先に出力されませんでした。笑

```bash
$ export com="export"
$ export c="a  b"
$ export b="a"$c'b'
$ echo "$b"
aa  bb
$ $com b="a"$c'b'
$ echo "$b"
aa
$ export com="echo"
$ $com b="a"$c'b'
b=aa bb
```

```bash
bash-3.2$ echo $PWD
/Users/corvvs/reps/42cursus/minishell
bash-3.2$ bash
bash-3.2$ echo $PWD
/Users/corvvs/reps/42cursus/minishell
bash-3.2$ exit
bash-3.2$ export PWD=oden
bash-3.2$ bash
bash-3.2$ echo $PWD
/Users/corvvs/reps/42cursus/minishell
bash-3.2$ exit
bash-3.2$ export PWD=/Users/corvvs/reps/42cursus
bash-3.2$ bash
bash-3.2$ echo $PWD
/Users/corvvs/reps/42cursus/minishell
bash-3.2$
```

```bash
bash-3.2$ (echo hello && echo world) > file
bash-3.2$ cat file
hello
world
bash-3.2$ (echo hello > file1 && echo world > file2) > file3
bash-3.2$ cat file1
hello
bash-3.2$ cat file2
world
bash-3.2$ cat file3
bash-3.2$
```

```bash
bash-3.2$ mkdir dir
bash-3.2$ ln -s dir symdir
bash-3.2$ cd symdir
bash-3.2$ pwd
/Users/yonishi/symdir
bash-3.2$
```

```bash
echo aaa > $NON_EXIST
```

```bash
export TEST
env | grep TEST
export | grep TEST
export HOGE=
env | grep HOGE
export | grep HOGE
```

```bash
export TEST=42
export TEST+=tokyo
env | grep TEST
```